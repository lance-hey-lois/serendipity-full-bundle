# Multi-stage Dockerfile for Quantum Collapse Kit Backend\nFROM python:3.10-slim as base\n\n# Set environment variables\nENV PYTHONDONTWRITEBYTECODE=1 \\\n    PYTHONUNBUFFERED=1 \\\n    PIP_NO_CACHE_DIR=1 \\\n    PIP_DISABLE_PIP_VERSION_CHECK=1\n\n# Install system dependencies\nRUN apt-get update && apt-get install -y \\\n    build-essential \\\n    curl \\\n    git \\\n    && rm -rf /var/lib/apt/lists/*\n\n# Create app user\nRUN useradd --create-home --shell /bin/bash app\n\n# Set work directory\nWORKDIR /app\n\n# Copy requirements first for better Docker layer caching\nCOPY backend/requirements.txt .\n\n# Install Python dependencies\nRUN pip install --upgrade pip \\\n    && pip install -r requirements.txt\n\n# Copy application code\nCOPY backend/ ./backend/\nCOPY engine/ ./engine/\nCOPY config/ ./config/\n\n# Create necessary directories\nRUN mkdir -p /app/logs /app/data\n\n# Set proper permissions\nRUN chown -R app:app /app\n\n# Switch to app user\nUSER app\n\n# Health check\nHEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \\\n    CMD curl -f http://localhost:8000/health || exit 1\n\n# Expose port\nEXPOSE 8000\n\n# Default command\nCMD [\"python\", \"-m\", \"uvicorn\", \"backend.main:app\", \"--host\", \"0.0.0.0\", \"--port\", \"8000\"]\n\n# =============================================================================\n# Development stage\n# =============================================================================\nFROM base as development\n\n# Install development dependencies\nRUN pip install \\\n    watchdog \\\n    pytest \\\n    pytest-asyncio \\\n    httpx \\\n    black \\\n    flake8 \\\n    mypy\n\n# Install additional dev tools\nRUN pip install ipython jupyter\n\n# Development command with hot reload\nCMD [\"python\", \"-m\", \"uvicorn\", \"backend.main:app\", \"--host\", \"0.0.0.0\", \"--port\", \"8000\", \"--reload\"]\n\n# =============================================================================\n# Production stage\n# =============================================================================\nFROM base as production\n\n# Install production WSGI server\nRUN pip install gunicorn\n\n# Production-optimized settings\nENV DEBUG=false \\\n    WORKERS=2 \\\n    MAX_REQUESTS=1000 \\\n    MAX_REQUESTS_JITTER=50\n\n# Production command\nCMD [\"gunicorn\", \"-w\", \"${WORKERS:-2}\", \"-k\", \"uvicorn.workers.UvicornWorker\", \\\n     \"--bind\", \"0.0.0.0:8000\", \\\n     \"--max-requests\", \"${MAX_REQUESTS:-1000}\", \\\n     \"--max-requests-jitter\", \"${MAX_REQUESTS_JITTER:-50}\", \\\n     \"--preload\", \\\n     \"backend.main:app\"]\n\n# Default to production\nFROM production\n"