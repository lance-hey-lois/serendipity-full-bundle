#!/bin/bash\n\n# Quantum Collapse Kit - Deployment Script\n# =========================================\n# \n# This script deploys the complete Quantum Collapse Kit with\n# Next.js frontend and Python FastAPI backend.\n\nset -e  # Exit on any error\n\n# Color codes for output\nRED='\\033[0;31m'\nGREEN='\\033[0;32m'\nYELLOW='\\033[1;33m'\nBLUE='\\033[0;34m'\nNC='\\033[0m' # No Color\n\n# Configuration\nPROJECT_NAME=\"quantum-collapse-kit\"\nVERSION=\"1.0.0\"\nDOCKER_COMPOSE_FILE=\"docker/docker-compose.yml\"\nDOCKER_COMPOSE_DEV_FILE=\"docker/docker-compose.dev.yml\"\nENV_FILE=\"config/environment.env\"\n\n# Function to print colored output\nprint_status() {\n    echo -e \"${BLUE}[INFO]${NC} $1\"\n}\n\nprint_success() {\n    echo -e \"${GREEN}[SUCCESS]${NC} $1\"\n}\n\nprint_warning() {\n    echo -e \"${YELLOW}[WARNING]${NC} $1\"\n}\n\nprint_error() {\n    echo -e \"${RED}[ERROR]${NC} $1\"\n}\n\n# Function to check prerequisites\ncheck_prerequisites() {\n    print_status \"Checking prerequisites...\"\n    \n    # Check Docker\n    if ! command -v docker &> /dev/null; then\n        print_error \"Docker is not installed. Please install Docker first.\"\n        exit 1\n    fi\n    \n    # Check Docker Compose\n    if ! command -v docker-compose &> /dev/null && ! docker compose version &> /dev/null; then\n        print_error \"Docker Compose is not installed. Please install Docker Compose first.\"\n        exit 1\n    fi\n    \n    # Check Node.js (for local development)\n    if ! command -v node &> /dev/null; then\n        print_warning \"Node.js is not installed. Some development features may not work.\"\n    fi\n    \n    # Check Python (for local development)\n    if ! command -v python3 &> /dev/null; then\n        print_warning \"Python 3 is not installed. Some development features may not work.\"\n    fi\n    \n    print_success \"Prerequisites check completed\"\n}\n\n# Function to setup environment\nsetup_environment() {\n    print_status \"Setting up environment...\"\n    \n    # Create .env file if it doesn't exist\n    if [ ! -f \".env\" ]; then\n        if [ -f \"$ENV_FILE\" ]; then\n            print_status \"Creating .env file from template\"\n            cp \"$ENV_FILE\" \".env\"\n            print_warning \"Please edit .env file with your configuration before running the services\"\n        else\n            print_error \"Environment template file not found: $ENV_FILE\"\n            exit 1\n        fi\n    else\n        print_status \"Environment file .env already exists\"\n    fi\n    \n    # Create necessary directories\n    mkdir -p logs data\n    \n    print_success \"Environment setup completed\"\n}\n\n# Function to build images\nbuild_images() {\n    print_status \"Building Docker images...\"\n    \n    if [ \"$1\" = \"dev\" ]; then\n        docker-compose -f \"$DOCKER_COMPOSE_FILE\" -f \"$DOCKER_COMPOSE_DEV_FILE\" build\n    else\n        docker-compose -f \"$DOCKER_COMPOSE_FILE\" build\n    fi\n    \n    print_success \"Docker images built successfully\"\n}\n\n# Function to run tests\nrun_tests() {\n    print_status \"Running tests...\"\n    \n    # Run backend tests\n    if [ -d \"tests/backend\" ]; then\n        print_status \"Running backend tests...\"\n        docker-compose -f \"$DOCKER_COMPOSE_FILE\" run --rm quantum-backend python -m pytest tests/backend/ -v\n    fi\n    \n    # Run frontend tests\n    if [ -d \"tests/frontend\" ]; then\n        print_status \"Running frontend tests...\"\n        docker-compose -f \"$DOCKER_COMPOSE_FILE\" run --rm quantum-frontend npm test\n    fi\n    \n    print_success \"All tests passed\"\n}\n\n# Function to start services\nstart_services() {\n    MODE=\"$1\"\n    PROFILES=\"$2\"\n    \n    print_status \"Starting Quantum Collapse Kit services...\"\n    \n    if [ \"$MODE\" = \"dev\" ]; then\n        print_status \"Starting in development mode\"\n        if [ -n \"$PROFILES\" ]; then\n            docker-compose -f \"$DOCKER_COMPOSE_FILE\" -f \"$DOCKER_COMPOSE_DEV_FILE\" --profile \"$PROFILES\" up -d\n        else\n            docker-compose -f \"$DOCKER_COMPOSE_FILE\" -f \"$DOCKER_COMPOSE_DEV_FILE\" up -d\n        fi\n    else\n        print_status \"Starting in production mode\"\n        if [ -n \"$PROFILES\" ]; then\n            docker-compose -f \"$DOCKER_COMPOSE_FILE\" --profile \"$PROFILES\" up -d\n        else\n            docker-compose -f \"$DOCKER_COMPOSE_FILE\" up -d\n        fi\n    fi\n    \n    print_success \"Services started successfully\"\n    \n    # Wait for services to be ready\n    print_status \"Waiting for services to be ready...\"\n    sleep 10\n    \n    # Health check\n    health_check\n}\n\n# Function to stop services\nstop_services() {\n    print_status \"Stopping services...\"\n    \n    docker-compose -f \"$DOCKER_COMPOSE_FILE\" -f \"$DOCKER_COMPOSE_DEV_FILE\" down\n    \n    print_success \"Services stopped successfully\"\n}\n\n# Function to check service health\nhealth_check() {\n    print_status \"Performing health checks...\"\n    \n    # Check backend health\n    for i in {1..30}; do\n        if curl -f http://localhost:8000/health &> /dev/null; then\n            print_success \"Backend is healthy\"\n            break\n        else\n            if [ $i -eq 30 ]; then\n                print_error \"Backend health check failed after 30 attempts\"\n                return 1\n            fi\n            sleep 2\n        fi\n    done\n    \n    # Check frontend health\n    for i in {1..30}; do\n        if curl -f http://localhost:3000/api/quantum/health &> /dev/null; then\n            print_success \"Frontend is healthy\"\n            break\n        else\n            if [ $i -eq 30 ]; then\n                print_error \"Frontend health check failed after 30 attempts\"\n                return 1\n            fi\n            sleep 2\n        fi\n    done\n    \n    print_success \"All services are healthy\"\n}\n\n# Function to show service status\nshow_status() {\n    print_status \"Service Status:\"\n    docker-compose -f \"$DOCKER_COMPOSE_FILE\" ps\n    \n    print_status \"\\nService URLs:\"\n    echo \"  Frontend: http://localhost:3000\"\n    echo \"  Backend API: http://localhost:8000\"\n    echo \"  API Documentation: http://localhost:8000/docs\"\n    echo \"  Health Check: http://localhost:8000/health\"\n    \n    if docker-compose -f \"$DOCKER_COMPOSE_FILE\" ps | grep -q \"quantum-prometheus\"; then\n        echo \"  Prometheus: http://localhost:9090\"\n    fi\n    \n    if docker-compose -f \"$DOCKER_COMPOSE_FILE\" ps | grep -q \"quantum-grafana\"; then\n        echo \"  Grafana: http://localhost:3001\"\n    fi\n}\n\n# Function to show logs\nshow_logs() {\n    SERVICE=\"$1\"\n    \n    if [ -n \"$SERVICE\" ]; then\n        docker-compose -f \"$DOCKER_COMPOSE_FILE\" logs -f \"$SERVICE\"\n    else\n        docker-compose -f \"$DOCKER_COMPOSE_FILE\" logs -f\n    fi\n}\n\n# Function to clean up\ncleanup() {\n    print_status \"Cleaning up...\"\n    \n    # Stop and remove containers\n    docker-compose -f \"$DOCKER_COMPOSE_FILE\" -f \"$DOCKER_COMPOSE_DEV_FILE\" down -v\n    \n    # Remove images (optional)\n    if [ \"$1\" = \"--images\" ]; then\n        print_status \"Removing Docker images...\"\n        docker image prune -f\n        docker-compose -f \"$DOCKER_COMPOSE_FILE\" down --rmi all\n    fi\n    \n    print_success \"Cleanup completed\"\n}\n\n# Function to show usage\nshow_usage() {\n    echo \"Quantum Collapse Kit Deployment Script\"\n    echo \"\"\n    echo \"Usage: $0 [COMMAND] [OPTIONS]\"\n    echo \"\"\n    echo \"Commands:\"\n    echo \"  start [dev|prod] [profile]  Start services (default: prod)\"\n    echo \"  stop                       Stop all services\"\n    echo \"  restart [dev|prod]         Restart services\"\n    echo \"  build [dev|prod]           Build Docker images\"\n    echo \"  test                       Run test suite\"\n    echo \"  status                     Show service status\"\n    echo \"  logs [service]             Show logs (all services or specific)\"\n    echo \"  health                     Check service health\"\n    echo \"  cleanup [--images]         Stop services and clean up\"\n    echo \"  setup                      Setup environment\"\n    echo \"\"\n    echo \"Profiles:\"\n    echo \"  cache                      Include Redis cache\"\n    echo \"  monitoring                 Include Prometheus + Grafana\"\n    echo \"  dev                        Development utilities\"\n    echo \"\"\n    echo \"Examples:\"\n    echo \"  $0 start dev               # Start in development mode\"\n    echo \"  $0 start prod monitoring   # Start production with monitoring\"\n    echo \"  $0 logs quantum-backend    # Show backend logs\"\n    echo \"  $0 cleanup --images        # Clean up including images\"\n}\n\n# Main script logic\nmain() {\n    echo \"ðŸš€ Quantum Collapse Kit Deployment Script v$VERSION\"\n    echo \"================================================\"\n    \n    case \"$1\" in\n        \"start\")\n            check_prerequisites\n            setup_environment\n            build_images \"$2\"\n            start_services \"$2\" \"$3\"\n            show_status\n            ;;\n        \"stop\")\n            stop_services\n            ;;\n        \"restart\")\n            stop_services\n            start_services \"$2\" \"$3\"\n            show_status\n            ;;\n        \"build\")\n            check_prerequisites\n            build_images \"$2\"\n            ;;\n        \"test\")\n            check_prerequisites\n            setup_environment\n            build_images \"dev\"\n            run_tests\n            ;;\n        \"status\")\n            show_status\n            ;;\n        \"logs\")\n            show_logs \"$2\"\n            ;;\n        \"health\")\n            health_check\n            ;;\n        \"cleanup\")\n            cleanup \"$2\"\n            ;;\n        \"setup\")\n            setup_environment\n            ;;\n        \"help\"|\"--help\"|\"-h\")\n            show_usage\n            ;;\n        \"\")\n            print_error \"No command specified\"\n            show_usage\n            exit 1\n            ;;\n        *)\n            print_error \"Unknown command: $1\"\n            show_usage\n            exit 1\n            ;;\n    esac\n}\n\n# Run main function with all arguments\nmain \"$@\"\n"