# Multi-stage Dockerfile for Quantum Collapse Kit Frontend\nFROM node:18-alpine as base\n\n# Install dependencies for building native modules\nRUN apk add --no-cache libc6-compat curl\n\n# Set working directory\nWORKDIR /app\n\n# Create app user\nRUN addgroup -g 1001 -S nodejs && \\\n    adduser -S nextjs -u 1001\n\n# =============================================================================\n# Dependencies stage\n# =============================================================================\nFROM base as deps\n\n# Copy package files\nCOPY frontend/package*.json ./\n\n# Install dependencies\nRUN npm ci --only=production --ignore-scripts\n\n# =============================================================================\n# Development stage\n# =============================================================================\nFROM base as development\n\n# Copy package files\nCOPY frontend/package*.json ./\n\n# Install all dependencies (including devDependencies)\nRUN npm ci --ignore-scripts\n\n# Copy source code\nCOPY frontend/ ./\n\n# Change ownership to nextjs user\nRUN chown -R nextjs:nodejs /app\n\n# Switch to nextjs user\nUSER nextjs\n\n# Expose port\nEXPOSE 3000\n\n# Development command\nCMD [\"npm\", \"run\", \"dev\"]\n\n# =============================================================================\n# Build stage\n# =============================================================================\nFROM base as builder\n\n# Build arguments\nARG NEXT_PUBLIC_QUANTUM_API_URL\nARG NEXT_PUBLIC_APP_VERSION\n\n# Set build environment variables\nENV NEXT_PUBLIC_QUANTUM_API_URL=$NEXT_PUBLIC_QUANTUM_API_URL\nENV NEXT_PUBLIC_APP_VERSION=$NEXT_PUBLIC_APP_VERSION\nENV NEXT_TELEMETRY_DISABLED=1\nENV NODE_ENV=production\n\n# Copy package files\nCOPY frontend/package*.json ./\n\n# Install dependencies\nRUN npm ci --only=production --ignore-scripts && npm cache clean --force\n\n# Copy source code\nCOPY frontend/ ./\n\n# Change ownership\nRUN chown -R nextjs:nodejs /app\n\n# Switch to nextjs user\nUSER nextjs\n\n# Build the application\nRUN npm run build\n\n# =============================================================================\n# Production stage\n# =============================================================================\nFROM base as production\n\n# Set production environment\nENV NODE_ENV=production\nENV NEXT_TELEMETRY_DISABLED=1\n\n# Copy built application from builder stage\nCOPY --from=builder /app/.next/standalone ./\nCOPY --from=builder /app/.next/static ./.next/static\nCOPY --from=builder /app/public ./public\n\n# Create necessary directories and set permissions\nRUN mkdir -p /app/.next/cache && \\\n    chown -R nextjs:nodejs /app\n\n# Switch to nextjs user\nUSER nextjs\n\n# Health check\nHEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \\\n    CMD curl -f http://localhost:3000/api/quantum/health || exit 1\n\n# Expose port\nEXPOSE 3000\n\n# Production command\nCMD [\"node\", \"server.js\"]\n\n# =============================================================================\n# Static export stage (optional)\n# =============================================================================\nFROM nginx:alpine as static\n\n# Copy static files from builder\nCOPY --from=builder /app/out /usr/share/nginx/html\n\n# Copy nginx configuration\nCOPY docker/nginx.conf /etc/nginx/nginx.conf\n\n# Expose port\nEXPOSE 80\n\n# Health check for nginx\nHEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \\\n    CMD curl -f http://localhost || exit 1\n\n# Default to production\nFROM production\n"